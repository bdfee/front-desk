import { Specialist, Appointment, Patient } from "../../models";
import { sequelize } from "../../utils/connectToDb";
import {
  createTestSpecialist,
  createTestPatientAndSpecialist,
  createTestPatient,
  dropAllTables,
} from "../helpers/models";
import { expectSpecialist } from "../helpers/shape";

beforeEach(async () => await dropAllTables());

test("complete specialist instance is returned with autogenerated primary key", async () => {
  const specialist = await createTestSpecialist();

  expectSpecialist(specialist);

  expect(specialist.specialistId).toEqual(1);
});

describe("model validators", () => {
  test("name cannot be empty string", async () => {
    await expect(Specialist.create({ name: "", speciality: "no name" })).rejects.toThrowError(
      "Validation error: Validation notEmpty on name failed"
    );
  });

  test("speciality cannot be empty string", async () => {
    await expect(Specialist.create({ name: "no speciality", speciality: "" })).rejects.toThrowError(
      "Validation error: Validation notEmpty on speciality failed"
    );
  });
});

describe("foreign key association tests", () => {
  test("specialist cannot be deleted if violating appointment fkey constraints", async () => {
    const specialist = await createTestSpecialist();
    const { patientId } = await createTestPatientAndSpecialist();

    expect(await Specialist.count()).toBe(2);
    expect(await Patient.count()).toBe(1);

    await Appointment.create({
      date: "2023-05-26",
      start: "09:00:00",
      end: "10:00:00",
      type: "intake",
      description: "Appointment description",
      specialistId: specialist.specialistId,
      patientId: patientId,
    });

    await expect(specialist.destroy()).rejects.toThrowError(
      'update or delete on table "specialists" violates foreign key constraint "appointments_specialist_id_fkey" on table "appointments"'
    );

    expect(await Specialist.count()).toBe(2);
    expect(await Patient.count()).toBe(1);
    expect(await Appointment.count()).toBe(1);
  });

  test("specialist cannot be deleted if violating patient fkey constraints", async () => {
    const specialist = await createTestSpecialist();
    await createTestPatient(specialist.specialistId);

    await expect(specialist.destroy()).rejects.toThrowError(
      'update or delete on table "specialists" violates foreign key constraint "patients_specialist_id_fkey" on table "patients"'
    );

    expect(await Specialist.count()).toBe(1);
    expect(await Patient.count()).toBe(1);
  });

  test("specialist cannot be deleted if violating appointment fkey constraints", async () => {
    const specialist1 = await createTestSpecialist();
    const specialist2 = await createTestSpecialist();
    const { patientId } = await createTestPatient(specialist2.specialistId);
    await Appointment.create({
      date: "2020-02-02",
      start: "09:00:00",
      end: "10:00:00",
      type: "intake",
      description: "Appointment description",
      specialistId: specialist1.specialistId,
      patientId,
    });

    await expect(specialist1.destroy()).rejects.toThrowError(
      'update or delete on table "specialists" violates foreign key constraint "appointments_specialist_id_fkey" on table "appointments"'
    );

    expect(await Specialist.count()).toBe(2);
    expect(await Patient.count()).toBe(1);
  });
});

afterAll(async () => await sequelize.close());
