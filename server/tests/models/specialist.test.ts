import { Specialist, Appointment, Patient } from "../../models";
import { sequelize } from "../../utils/connectToDb";
import { createTestSpecialist } from "./helpers";

beforeAll(async () => {
  await Specialist.drop({
    cascade: true,
  });

  await Patient.drop({
    cascade: true,
  });

  await Appointment.drop({
    cascade: true,
  });

  await sequelize.sync();
});

test("complete specialist instance is returned with autogenerated primary key", async () => {
  const specialist = await createTestSpecialist();

  expect("specialistid" in specialist && "name" in specialist && "speciality" in specialist);
  expect(specialist.specialistId).toEqual(1);
});

test("name cannot be empty string", async () => {
  await expect(Specialist.create({ name: "", speciality: "no name" })).rejects.toThrowError(
    "Validation error: Validation notEmpty on name failed"
  );
});

test("name cannot be empty string", async () => {
  await expect(Specialist.create({ name: "no speciality", speciality: "" })).rejects.toThrowError(
    "Validation error: Validation notEmpty on speciality failed"
  );
});

// name cannot be null
// speciality cannot be null

afterAll(async () => {
  await sequelize.close();
});
