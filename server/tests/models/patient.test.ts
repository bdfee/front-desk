import { Specialist, Appointment, Patient } from "../../models";
import { createTestPatientAndSpecialist, createTestSpecialist, dropAllTables } from "../helpers/models";
import { expectPatient } from "../helpers/shape";
import { sequelize } from "../../utils/connectToDb";

beforeEach(async () => await dropAllTables());

test("complete patient instance is returned with autogenerated primary key", async () => {
  const patient = await createTestPatientAndSpecialist();

  expectPatient(patient);

  expect(patient.patientId).toEqual(1);
  expect(patient.specialistId).toEqual(1);
});

describe("model validators", () => {
  test("name cannot be empty string", async () => {
    await expect(
      Patient.create({
        name: "",
        email: "test@test.com",
        phone: "1234567890",
        dateOfBirth: "2020-02-02",
        gender: "male",
        address: "123 street city state",
        specialistId: 1,
      })
    ).rejects.toThrowError("Validation error: Validation notEmpty on name failed");
  });

  test("email cannot be empty string", async () => {
    await expect(
      Patient.create({
        name: "test patient",
        email: "",
        phone: "1234567890",
        dateOfBirth: "2020-02-02",
        gender: "male",
        address: "123 street city state",
        specialistId: 1,
      })
    ).rejects.toThrowError("Validation error: Validation notEmpty on email failed");
  });

  test("email must be in a valid format", async () => {
    await expect(
      Patient.create({
        name: "test patient",
        email: "invalid-email",
        phone: "1234567890",
        dateOfBirth: "2020-02-02",
        gender: "male",
        address: "123 street city state",
        specialistId: 1,
      })
    ).rejects.toThrowError("Validation error: Validation isEmail on email failed");
  });

  test("phone number must be 10 characters long", async () => {
    await expect(
      Patient.create({
        name: "test patient",
        email: "test@test.com",
        phone: "12345",
        dateOfBirth: "2020-02-02",
        gender: "male",
        address: "123 street city state",
        specialistId: 1,
      })
    ).rejects.toThrowError("Validation error: phone number must be 10 characters long");
  });

  test("dateOfBirth cannot be empty string", async () => {
    await expect(
      Patient.create({
        name: "test patient",
        email: "test@test.com",
        phone: "1234567890",
        dateOfBirth: "",
        gender: "male",
        address: "123 street city state",
        specialistId: 1,
      })
    ).rejects.toThrowError("Validation error: Validation notEmpty on dateOfBirth failed");
  });

  test("dateOfBirth must be a valid date", async () => {
    await expect(
      Patient.create({
        name: "test patient",
        email: "test@test.com",
        phone: "1234567890",
        dateOfBirth: "invalid-date",
        gender: "male",
        address: "123 street city state",
        specialistId: 1,
      })
    ).rejects.toThrowError("Validation error: Validation isDate on dateOfBirth failed");
  });

  test("gender cannot be empty string", async () => {
    await expect(
      Patient.create({
        name: "test patient",
        email: "test@test.com",
        phone: "1234567890",
        dateOfBirth: "2020-02-02",
        gender: "",
        address: "123 street city state",
        specialistId: 1,
      })
    ).rejects.toThrowError("Validation error: Validation notEmpty on gender failed");
  });

  test("address cannot be empty string", async () => {
    await expect(
      Patient.create({
        name: "test patient",
        email: "test@test.com",
        phone: "1234567890",
        dateOfBirth: "2020-02-02",
        gender: "male",
        address: "",
        specialistId: 1,
      })
    ).rejects.toThrowError("Validation error: Validation notEmpty on address failed");
  });
});

describe("foreign key association tests", () => {
  test("patient cannot be created with invalid specialist fkey", async () => {
    await expect(
      Patient.create({
        name: "test patient",
        email: "test@test.com",
        phone: "1234567890",
        dateOfBirth: "2020-02-02",
        gender: "male",
        address: "123 street city state",
        specialistId: 2,
      })
    ).rejects.toThrowError(
      'insert or update on table "patients" violates foreign key constraint "patients_specialist_id_fkey"'
    );
  });

  test("patient can be deleted without violating specialist fkey constraints", async () => {
    const patient = await createTestPatientAndSpecialist();

    expect(await Specialist.count()).toBe(1);
    expect(await Patient.count()).toBe(1);
    await patient.destroy();
    expect(await Specialist.count()).toBe(1);
    expect(await Patient.count()).toBe(0);
  });

  test("patient cannot be deleted if violating appointment fkey constraints", async () => {
    const patient = await createTestPatientAndSpecialist();
    const { specialistId } = await createTestSpecialist();

    expect(await Specialist.count()).toBe(2);
    expect(await Patient.count()).toBe(1);

    await Appointment.create({
      date: "2023-05-26",
      start: "09:00:00",
      end: "10:00:00",
      type: "intake",
      description: "Appointment description",
      specialistId,
      patientId: patient.patientId,
    });

    await expect(patient.destroy()).rejects.toThrowError(
      'update or delete on table "patients" violates foreign key constraint "appointments_patient_id_fkey" on table "appointments"'
    );

    expect(await Specialist.count()).toBe(2);
    expect(await Patient.count()).toBe(1);
    expect(await Appointment.count()).toBe(1);
  });
});

afterAll(async () => await sequelize.close());
